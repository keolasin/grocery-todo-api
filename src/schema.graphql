type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, orderBy: FoodOrderByInput): [Food!]!
    food(id: ID!): Food
    groupList(filter: String, skip: Int, first: Int orderBy: GroupOrderByInput): [Group!]
}

type Mutation {
    createFood(name: String!, quantity: Int!, inCart: Boolean!, groupId: ID!): Food!
    updateFood(id: ID!, name: String!, quantity: Int!, inCart: Boolean!): Food
    deleteFood(id: ID!): Food
    
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload

    vote(foodId: ID!): Vote

    createGroup(name: String!, isPrivate: Boolean!): Group!
    updateGroup(id: ID!, name: String!, isPrivate: Boolean!): Group
    deleteGroup(id: ID!): Group
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    foods: [Food!]!
    votes: [Vote!]!
    createdGroups: [Group!]
    memberOfGroups: [Group!]
}

type Group {
    id: ID!
    name: String!
    createdBy: User!
    members: [User!]!
    isPrivate: Boolean!
    foods: [Food]
}

type Subscription {
    newFood: Food
    newVote: Vote
    newGroup: Group
}


type Food {
    id: ID!
    name: String!
    quantity: Int!
    inCart: Boolean!
    postedBy: User
    votes: [Vote!]!
    group: Group
}

type Vote {
    id: ID!
    food: Food!
    user: User!
}

enum FoodOrderByInput {
    name_ASC
    name_DESC
    inCart_ASC
    inCart_DESC
    quantity_ASC
    quantity_DESC
    postedBy_ASC
    postedBy_DESC
    createdAt_ASC
    createdAt_DESC
}

enum GroupOrderByInput {
    name_ASC
    name_DESC
    createdBy_ASC
    createdBy_DESC
    createdAt_ASC
    createdAt_DESC
    isPrivate_ASC
    isPrivate_DESC
}