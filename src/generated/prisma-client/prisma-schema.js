module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateFood {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Food {
  id: ID!
  createdAt: DateTime!
  name: String!
  quantity: Int!
  inCart: Boolean!
  postedBy: User
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  group: Group
}

type FoodConnection {
  pageInfo: PageInfo!
  edges: [FoodEdge]!
  aggregate: AggregateFood!
}

input FoodCreateInput {
  id: ID
  name: String!
  quantity: Int!
  inCart: Boolean!
  postedBy: UserCreateOneWithoutFoodsInput
  votes: VoteCreateManyWithoutFoodInput
  group: GroupCreateOneWithoutFoodsInput
}

input FoodCreateManyWithoutGroupInput {
  create: [FoodCreateWithoutGroupInput!]
  connect: [FoodWhereUniqueInput!]
}

input FoodCreateManyWithoutPostedByInput {
  create: [FoodCreateWithoutPostedByInput!]
  connect: [FoodWhereUniqueInput!]
}

input FoodCreateOneWithoutVotesInput {
  create: FoodCreateWithoutVotesInput
  connect: FoodWhereUniqueInput
}

input FoodCreateWithoutGroupInput {
  id: ID
  name: String!
  quantity: Int!
  inCart: Boolean!
  postedBy: UserCreateOneWithoutFoodsInput
  votes: VoteCreateManyWithoutFoodInput
}

input FoodCreateWithoutPostedByInput {
  id: ID
  name: String!
  quantity: Int!
  inCart: Boolean!
  votes: VoteCreateManyWithoutFoodInput
  group: GroupCreateOneWithoutFoodsInput
}

input FoodCreateWithoutVotesInput {
  id: ID
  name: String!
  quantity: Int!
  inCart: Boolean!
  postedBy: UserCreateOneWithoutFoodsInput
  group: GroupCreateOneWithoutFoodsInput
}

type FoodEdge {
  node: Food!
  cursor: String!
}

enum FoodOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  quantity_ASC
  quantity_DESC
  inCart_ASC
  inCart_DESC
}

type FoodPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  quantity: Int!
  inCart: Boolean!
}

input FoodScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  inCart: Boolean
  inCart_not: Boolean
  AND: [FoodScalarWhereInput!]
  OR: [FoodScalarWhereInput!]
  NOT: [FoodScalarWhereInput!]
}

type FoodSubscriptionPayload {
  mutation: MutationType!
  node: Food
  updatedFields: [String!]
  previousValues: FoodPreviousValues
}

input FoodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FoodWhereInput
  AND: [FoodSubscriptionWhereInput!]
  OR: [FoodSubscriptionWhereInput!]
  NOT: [FoodSubscriptionWhereInput!]
}

input FoodUpdateInput {
  name: String
  quantity: Int
  inCart: Boolean
  postedBy: UserUpdateOneWithoutFoodsInput
  votes: VoteUpdateManyWithoutFoodInput
  group: GroupUpdateOneWithoutFoodsInput
}

input FoodUpdateManyDataInput {
  name: String
  quantity: Int
  inCart: Boolean
}

input FoodUpdateManyMutationInput {
  name: String
  quantity: Int
  inCart: Boolean
}

input FoodUpdateManyWithoutGroupInput {
  create: [FoodCreateWithoutGroupInput!]
  delete: [FoodWhereUniqueInput!]
  connect: [FoodWhereUniqueInput!]
  set: [FoodWhereUniqueInput!]
  disconnect: [FoodWhereUniqueInput!]
  update: [FoodUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [FoodUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [FoodScalarWhereInput!]
  updateMany: [FoodUpdateManyWithWhereNestedInput!]
}

input FoodUpdateManyWithoutPostedByInput {
  create: [FoodCreateWithoutPostedByInput!]
  delete: [FoodWhereUniqueInput!]
  connect: [FoodWhereUniqueInput!]
  set: [FoodWhereUniqueInput!]
  disconnect: [FoodWhereUniqueInput!]
  update: [FoodUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [FoodUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [FoodScalarWhereInput!]
  updateMany: [FoodUpdateManyWithWhereNestedInput!]
}

input FoodUpdateManyWithWhereNestedInput {
  where: FoodScalarWhereInput!
  data: FoodUpdateManyDataInput!
}

input FoodUpdateOneRequiredWithoutVotesInput {
  create: FoodCreateWithoutVotesInput
  update: FoodUpdateWithoutVotesDataInput
  upsert: FoodUpsertWithoutVotesInput
  connect: FoodWhereUniqueInput
}

input FoodUpdateWithoutGroupDataInput {
  name: String
  quantity: Int
  inCart: Boolean
  postedBy: UserUpdateOneWithoutFoodsInput
  votes: VoteUpdateManyWithoutFoodInput
}

input FoodUpdateWithoutPostedByDataInput {
  name: String
  quantity: Int
  inCart: Boolean
  votes: VoteUpdateManyWithoutFoodInput
  group: GroupUpdateOneWithoutFoodsInput
}

input FoodUpdateWithoutVotesDataInput {
  name: String
  quantity: Int
  inCart: Boolean
  postedBy: UserUpdateOneWithoutFoodsInput
  group: GroupUpdateOneWithoutFoodsInput
}

input FoodUpdateWithWhereUniqueWithoutGroupInput {
  where: FoodWhereUniqueInput!
  data: FoodUpdateWithoutGroupDataInput!
}

input FoodUpdateWithWhereUniqueWithoutPostedByInput {
  where: FoodWhereUniqueInput!
  data: FoodUpdateWithoutPostedByDataInput!
}

input FoodUpsertWithoutVotesInput {
  update: FoodUpdateWithoutVotesDataInput!
  create: FoodCreateWithoutVotesInput!
}

input FoodUpsertWithWhereUniqueWithoutGroupInput {
  where: FoodWhereUniqueInput!
  update: FoodUpdateWithoutGroupDataInput!
  create: FoodCreateWithoutGroupInput!
}

input FoodUpsertWithWhereUniqueWithoutPostedByInput {
  where: FoodWhereUniqueInput!
  update: FoodUpdateWithoutPostedByDataInput!
  create: FoodCreateWithoutPostedByInput!
}

input FoodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  inCart: Boolean
  inCart_not: Boolean
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  group: GroupWhereInput
  AND: [FoodWhereInput!]
  OR: [FoodWhereInput!]
  NOT: [FoodWhereInput!]
}

input FoodWhereUniqueInput {
  id: ID
}

type Group {
  id: ID!
  name: String!
  createdAt: DateTime!
  createdBy: User!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isPrivate: Boolean!
  foods(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Food!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  createdBy: UserCreateOneWithoutCreatedGroupsInput!
  members: UserCreateManyWithoutMemberOfGroupsInput
  isPrivate: Boolean!
  foods: FoodCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutCreatedByInput {
  create: [GroupCreateWithoutCreatedByInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutFoodsInput {
  create: GroupCreateWithoutFoodsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutCreatedByInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutMemberOfGroupsInput
  isPrivate: Boolean!
  foods: FoodCreateManyWithoutGroupInput
}

input GroupCreateWithoutFoodsInput {
  id: ID
  name: String!
  createdBy: UserCreateOneWithoutCreatedGroupsInput!
  members: UserCreateManyWithoutMemberOfGroupsInput
  isPrivate: Boolean!
}

input GroupCreateWithoutMembersInput {
  id: ID
  name: String!
  createdBy: UserCreateOneWithoutCreatedGroupsInput!
  isPrivate: Boolean!
  foods: FoodCreateManyWithoutGroupInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  isPrivate_ASC
  isPrivate_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  isPrivate: Boolean!
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  isPrivate: Boolean
  isPrivate_not: Boolean
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  createdBy: UserUpdateOneRequiredWithoutCreatedGroupsInput
  members: UserUpdateManyWithoutMemberOfGroupsInput
  isPrivate: Boolean
  foods: FoodUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  name: String
  isPrivate: Boolean
}

input GroupUpdateManyMutationInput {
  name: String
  isPrivate: Boolean
}

input GroupUpdateManyWithoutCreatedByInput {
  create: [GroupCreateWithoutCreatedByInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneWithoutFoodsInput {
  create: GroupCreateWithoutFoodsInput
  update: GroupUpdateWithoutFoodsDataInput
  upsert: GroupUpsertWithoutFoodsInput
  delete: Boolean
  disconnect: Boolean
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutCreatedByDataInput {
  name: String
  members: UserUpdateManyWithoutMemberOfGroupsInput
  isPrivate: Boolean
  foods: FoodUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutFoodsDataInput {
  name: String
  createdBy: UserUpdateOneRequiredWithoutCreatedGroupsInput
  members: UserUpdateManyWithoutMemberOfGroupsInput
  isPrivate: Boolean
}

input GroupUpdateWithoutMembersDataInput {
  name: String
  createdBy: UserUpdateOneRequiredWithoutCreatedGroupsInput
  isPrivate: Boolean
  foods: FoodUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutCreatedByInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutCreatedByDataInput!
}

input GroupUpdateWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutMembersDataInput!
}

input GroupUpsertWithoutFoodsInput {
  update: GroupUpdateWithoutFoodsDataInput!
  create: GroupCreateWithoutFoodsInput!
}

input GroupUpsertWithWhereUniqueWithoutCreatedByInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutCreatedByDataInput!
  create: GroupCreateWithoutCreatedByInput!
}

input GroupUpsertWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  isPrivate: Boolean
  isPrivate_not: Boolean
  foods_every: FoodWhereInput
  foods_some: FoodWhereInput
  foods_none: FoodWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFood(data: FoodCreateInput!): Food!
  updateFood(data: FoodUpdateInput!, where: FoodWhereUniqueInput!): Food
  updateManyFoods(data: FoodUpdateManyMutationInput!, where: FoodWhereInput): BatchPayload!
  upsertFood(where: FoodWhereUniqueInput!, create: FoodCreateInput!, update: FoodUpdateInput!): Food!
  deleteFood(where: FoodWhereUniqueInput!): Food
  deleteManyFoods(where: FoodWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  food(where: FoodWhereUniqueInput!): Food
  foods(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Food]!
  foodsConnection(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Subscription {
  food(where: FoodSubscriptionWhereInput): FoodSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  foods(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Food!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  createdGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  memberOfGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  foods: FoodCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  createdGroups: GroupCreateManyWithoutCreatedByInput
  memberOfGroups: GroupCreateManyWithoutMembersInput
}

input UserCreateManyWithoutMemberOfGroupsInput {
  create: [UserCreateWithoutMemberOfGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreatedGroupsInput {
  create: UserCreateWithoutCreatedGroupsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFoodsInput {
  create: UserCreateWithoutFoodsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedGroupsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  foods: FoodCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  memberOfGroups: GroupCreateManyWithoutMembersInput
}

input UserCreateWithoutFoodsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
  createdGroups: GroupCreateManyWithoutCreatedByInput
  memberOfGroups: GroupCreateManyWithoutMembersInput
}

input UserCreateWithoutMemberOfGroupsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  foods: FoodCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  createdGroups: GroupCreateManyWithoutCreatedByInput
}

input UserCreateWithoutVotesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  foods: FoodCreateManyWithoutPostedByInput
  createdGroups: GroupCreateManyWithoutCreatedByInput
  memberOfGroups: GroupCreateManyWithoutMembersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  foods: FoodUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  createdGroups: GroupUpdateManyWithoutCreatedByInput
  memberOfGroups: GroupUpdateManyWithoutMembersInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyWithoutMemberOfGroupsInput {
  create: [UserCreateWithoutMemberOfGroupsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMemberOfGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMemberOfGroupsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCreatedGroupsInput {
  create: UserCreateWithoutCreatedGroupsInput
  update: UserUpdateWithoutCreatedGroupsDataInput
  upsert: UserUpsertWithoutCreatedGroupsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutFoodsInput {
  create: UserCreateWithoutFoodsInput
  update: UserUpdateWithoutFoodsDataInput
  upsert: UserUpsertWithoutFoodsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCreatedGroupsDataInput {
  name: String
  email: String
  password: String
  foods: FoodUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  memberOfGroups: GroupUpdateManyWithoutMembersInput
}

input UserUpdateWithoutFoodsDataInput {
  name: String
  email: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
  createdGroups: GroupUpdateManyWithoutCreatedByInput
  memberOfGroups: GroupUpdateManyWithoutMembersInput
}

input UserUpdateWithoutMemberOfGroupsDataInput {
  name: String
  email: String
  password: String
  foods: FoodUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  createdGroups: GroupUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutVotesDataInput {
  name: String
  email: String
  password: String
  foods: FoodUpdateManyWithoutPostedByInput
  createdGroups: GroupUpdateManyWithoutCreatedByInput
  memberOfGroups: GroupUpdateManyWithoutMembersInput
}

input UserUpdateWithWhereUniqueWithoutMemberOfGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMemberOfGroupsDataInput!
}

input UserUpsertWithoutCreatedGroupsInput {
  update: UserUpdateWithoutCreatedGroupsDataInput!
  create: UserCreateWithoutCreatedGroupsInput!
}

input UserUpsertWithoutFoodsInput {
  update: UserUpdateWithoutFoodsDataInput!
  create: UserCreateWithoutFoodsInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserUpsertWithWhereUniqueWithoutMemberOfGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMemberOfGroupsDataInput!
  create: UserCreateWithoutMemberOfGroupsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  foods_every: FoodWhereInput
  foods_some: FoodWhereInput
  foods_none: FoodWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  createdGroups_every: GroupWhereInput
  createdGroups_some: GroupWhereInput
  createdGroups_none: GroupWhereInput
  memberOfGroups_every: GroupWhereInput
  memberOfGroups_some: GroupWhereInput
  memberOfGroups_none: GroupWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote {
  id: ID!
  food: Food!
  user: User!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  food: FoodCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutFoodInput {
  create: [VoteCreateWithoutFoodInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutFoodInput {
  id: ID
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  id: ID
  food: FoodCreateOneWithoutVotesInput!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
}

type VotePreviousValues {
  id: ID!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  food: FoodUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyWithoutFoodInput {
  create: [VoteCreateWithoutFoodInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutFoodInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutFoodInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateWithoutFoodDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  food: FoodUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutFoodInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutFoodDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutFoodInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutFoodDataInput!
  create: VoteCreateWithoutFoodInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  food: FoodWhereInput
  user: UserWhereInput
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    